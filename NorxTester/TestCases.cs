using System;

namespace NorxManaged
{
    public class TestCases
    {
        public struct TestCase
        {
            public byte[] Key; // K
            public byte[] Nonce; // N 
            public byte[] Header; // A
            public byte[] Payload; // M or C
            public byte[] Trailer; // Z
            public byte Rounds; // l
            public byte Parallelism; // p
            public short TagSizeBits; // t
            public byte[] ResultingTag;
            public byte[] ResultingCT;
        }

        internal TestCase[] _cases64 = new TestCase[3];
        internal TestCase[] _cases32 = new TestCase[2];
        public TestCase[] Cases64 { get { return _cases64; } }
        public TestCase[] Cases32 { get { return _cases32; } }

        public TestCases()
        {
            byte[] K32 = new byte[16];
            byte[] K64 = new byte[32];
            byte[] N32 = new byte[16];
            byte[] N64 = new byte[32];
            byte[] X = new byte[128];

            for (byte i = 0; i < 128; i++)
            {
                if (i < 32) K64[i] = i;
                if (i < 16) K32[i] = i;
                if (i < 32) N64[i] = (byte)(i + 0x20);
                if (i < 16) N32[i] = (byte)(i + 0x20);
                X[i] = i;
            }

            _cases64[0] = new TestCase()
            {
                Key = K64,
                Nonce = N64,
                Header = X,
                Payload = X,
                Trailer = X,
                Rounds = 4,
                Parallelism = 1,
                TagSizeBits = 256,
                ResultingCT = new byte[] { 0xC0, 0x81, 0x6E, 0x50, 0x8A, 0xE4, 0xA0, 0x50, 0x0B, 0x93, 0x38, 0x7B, 0xBB, 0xAB, 0xC2, 0x41,
                                            0xAC, 0x42, 0x38, 0x7E, 0xF5, 0xE8, 0xBF, 0x0E, 0xC3, 0x82, 0x6C, 0xED, 0xE1, 0x66, 0xA1, 0xD5,
                                            0xCA, 0xA3, 0xE8, 0xD6, 0x2C, 0xD6, 0x41, 0xB3, 0xFA, 0xF2, 0xAA, 0x2A, 0xDD, 0xE3, 0xE5, 0xED,
                                            0x0A, 0x13, 0xBD, 0x8B, 0x96, 0xD5, 0xF0, 0xFB, 0x7F, 0xE3, 0x9C, 0xA7, 0x80, 0x95, 0x31, 0x75,
                                            0xE2, 0x45, 0xBC, 0x3E, 0x53, 0x4B, 0x80, 0x0E, 0x96, 0x46, 0x77, 0x1F, 0x13, 0xEA, 0x40, 0x85,
                                            0xCB, 0x3E, 0x26, 0x7F, 0x10, 0x6F, 0x5F, 0x17, 0xA0, 0x64, 0xFF, 0x23, 0x4A, 0x02, 0x7C, 0x64,
                                            0x4B, 0xE7, 0x86, 0x65, 0xDB, 0x1C, 0x46, 0xA4, 0xB0, 0x1A, 0x4F, 0xBF, 0x52, 0x76, 0xDF, 0xBD,
                                            0x30, 0xEB, 0xBF, 0xB8, 0x84, 0x66, 0xF8, 0xDC, 0x89, 0x7A, 0x78, 0x16, 0xD0, 0xD0, 0x70, 0xD8 },
                ResultingTag = new byte[] { 0xD1, 0xF2, 0xFA, 0x33, 0x05, 0xA3, 0x23, 0x76, 0xE2, 0x3A, 0x61, 0xD1, 0xC9, 0x89, 0x30, 0x3F,
                                            0xBF, 0xBD, 0x93, 0x5A, 0xA5, 0x5B, 0x17, 0xE4, 0xE7, 0x25, 0x47, 0x33, 0xC4, 0x73, 0x40, 0x8E }
            };

            _cases64[1] = new TestCase()
            {
                Key = K64,
                Nonce = N64,
                Header = X,
                Payload = X,
                Trailer = X,
                Rounds = 6,
                Parallelism = 1,
                TagSizeBits = 256,
                ResultingCT = new byte[] { 0x50, 0xCE, 0x69, 0x2C, 0x19, 0xCB, 0x91, 0x02, 0xC6, 0x12, 0x96, 0x6F, 0x0F, 0x62, 0x6B, 0x62,
                                            0x96, 0xDE, 0x89, 0x27, 0x1C, 0x98, 0x29, 0x10, 0xAA, 0xC1, 0xC3, 0x55, 0x52, 0x2E, 0x8F, 0xA7,
                                            0x13, 0x03, 0xF8, 0xD5, 0xC9, 0xDE, 0x39, 0x04, 0x84, 0xBA, 0x91, 0xA9, 0x94, 0xCF, 0xF9, 0x1B,
                                            0xF7, 0x15, 0xD6, 0xCB, 0x22, 0xCC, 0x00, 0xF3, 0x64, 0x02, 0x10, 0x03, 0x17, 0x19, 0x61, 0x68,
                                            0x72, 0x39, 0xDD, 0x94, 0x53, 0x02, 0x9B, 0x87, 0x85, 0x9C, 0x10, 0x93, 0x21, 0x13, 0x59, 0x40,
                                            0xBC, 0x1B, 0xC8, 0x1A, 0x55, 0xA9, 0x51, 0xC7, 0x1B, 0x29, 0x42, 0xFF, 0xDE, 0xBF, 0x8D, 0x13,
                                            0xC4, 0xF3, 0x87, 0x2B, 0x78, 0xD4, 0x50, 0x6F, 0x40, 0xDB, 0x65, 0x3C, 0xE3, 0xB8, 0xD2, 0xBE,
                                            0xA7, 0xA2, 0xF9, 0xE9, 0x7F, 0xF4, 0x56, 0xB7, 0xF0, 0xDB, 0x8C, 0x92, 0x27, 0xE2, 0x2F, 0x23},
                ResultingTag = new byte[] { 0xA0, 0xD1, 0x0D, 0x28, 0x52, 0x91, 0xBE, 0xDB, 0x7B, 0x7C, 0xBD, 0xC4, 0x7E, 0x0F, 0xE2, 0x38,
                                            0x5B, 0xF5, 0x5B, 0xC5, 0xF0, 0x57, 0xBC, 0xAB, 0x2C, 0x57, 0xCC, 0xD0, 0x83, 0xD2, 0x9B, 0x2C}
            };

            _cases64[2] = new TestCase()
            {
                Key = K64,
                Nonce = N64,
                Header = X,
                Payload = X,
                Trailer = X,
                Rounds = 4,
                Parallelism = 4,
                TagSizeBits = 256,
                ResultingCT = new byte[] { 0xB6, 0x5A, 0xD4, 0x9D, 0x08, 0x12, 0x87, 0x73, 0x03, 0x76, 0xA0, 0x38, 0xF1, 0x32, 0xB2, 0x0C,
                                            0x33, 0xE5, 0x58, 0x30, 0x20, 0x27, 0xC0, 0xD9, 0x1C, 0x03, 0x0B, 0x9C, 0x7D, 0xDA, 0x19, 0xC7,
                                            0x51, 0x1A, 0x4F, 0x02, 0x5A, 0xFD, 0x40, 0xFD, 0xA2, 0x95, 0xC9, 0x22, 0x29, 0xFA, 0xEA, 0x13,
                                            0xA6, 0x14, 0x05, 0x36, 0x44, 0x0B, 0xEB, 0xFC, 0xD3, 0x62, 0x72, 0x5D, 0x9E, 0xE9, 0x0F, 0x2C,
                                            0x2A, 0xAC, 0x10, 0x6B, 0x5F, 0x49, 0x86, 0x9B, 0x9F, 0xE2, 0x2C, 0xD9, 0xF1, 0x84, 0x84, 0xFC,
                                            0x70, 0xC2, 0x22, 0x8C, 0x1D, 0xA3, 0x07, 0x21, 0x21, 0x97, 0x2C, 0x2B, 0xD9, 0x9A, 0x29, 0x2A,
                                            0x15, 0x51, 0x52, 0xB1, 0x67, 0x72, 0x3F, 0xF7, 0xCD, 0xA5, 0xBB, 0xA3, 0xDA, 0x09, 0xE3, 0x69,
                                            0xF2, 0x7B, 0xFE, 0x53, 0x88, 0x63, 0xFF, 0x56, 0x18, 0x40, 0x01, 0x28, 0x8C, 0xC1, 0xBE, 0xEC},
                ResultingTag = new byte[] { 0x01, 0x61, 0x3B, 0x7E, 0x49, 0x80, 0x00, 0xA7, 0x67, 0xF5, 0xD5, 0x35, 0x3F, 0x8F, 0xFD, 0x99,
                                            0x78, 0x72, 0x05, 0x7C, 0x1F, 0xDC, 0x50, 0x14, 0xCF, 0x82, 0x27, 0xEB, 0xB8, 0xA7, 0x5C, 0xAC}
            };

            _cases32[0] = new TestCase()
            {
                Key = K32,
                Nonce = N32,
                Header = X,
                Payload = X,
                Trailer = X,
                Rounds = 4,
                Parallelism = 1,
                TagSizeBits = 128,
                ResultingCT = new byte[] {0x6C, 0xE9, 0x4C, 0xB5, 0x48, 0xB2, 0x0F, 0xED, 0x7B, 0x68, 0xC6, 0xAC, 0x60, 0xAC, 0x4C, 0xB5,
                                            0xEB, 0xB1, 0xF0, 0x9A, 0xEC, 0x5A, 0x75, 0x0E, 0xCF, 0x50, 0xEC, 0x0E, 0x64, 0x93, 0x8B, 0xF2,
                                            0x40, 0x17, 0xA4, 0xFF, 0x06, 0x84, 0xF8, 0x08, 0xA6, 0x7C, 0x19, 0x6C, 0x31, 0xA0, 0xAF, 0x12,
                                            0x56, 0x9B, 0xE5, 0xF7, 0xC5, 0x6A, 0xD3, 0xBC, 0xAC, 0x88, 0xDA, 0x36, 0x86, 0x57, 0x5F, 0x93,
                                            0x43, 0x96, 0x8D, 0xA2, 0x20, 0x77, 0xEE, 0xCC, 0xE7, 0xD6, 0x63, 0x17, 0x49, 0x08, 0xA3, 0xF7,
                                            0x3C, 0x9E, 0x9A, 0xC1, 0x49, 0xB5, 0xCE, 0x6B, 0xE6, 0x9C, 0x9E, 0x31, 0x7C, 0xD7, 0xE7, 0xE8,
                                            0x0C, 0x85, 0x69, 0x97, 0x74, 0x02, 0x24, 0x41, 0x3A, 0xE0, 0x64, 0xA2, 0x5A, 0x81, 0x08, 0xB8,
                                            0xD3, 0xA6, 0x85, 0x92, 0x74, 0xC7, 0x65, 0x86, 0xE2, 0x9C, 0x27, 0xED, 0x11, 0xFB, 0x71, 0x95},

                ResultingTag = new byte[] { 0xD5, 0x54, 0xE4, 0xBC, 0x6B, 0x5B, 0xB7, 0x89, 0x54, 0x77, 0x59, 0xEA, 0xCD, 0xFF, 0xCF, 0x47 }
            };

            _cases32[1] = new TestCase()
            {
                Key = K32,
                Nonce = N32,
                Header = X,
                Payload = X,
                Trailer = X,
                Rounds = 6,
                Parallelism = 1,
                TagSizeBits = 128,
                ResultingCT = new byte[] {0x20, 0x9B, 0x0B, 0x2A, 0xFE, 0x36, 0x2A, 0x83, 0x3B, 0xB1, 0x8A, 0xCF, 0x03, 0xE1, 0xD0, 0xC2,
                                            0x7C, 0x69, 0x47, 0x52, 0x66, 0x79, 0x47, 0xFC, 0x73, 0x8C, 0x0E, 0x40, 0xE3, 0xD5, 0x97, 0xC2,
                                            0x2D, 0x74, 0xE9, 0x06, 0xE8, 0xC4, 0x73, 0xAD, 0xF0, 0xDB, 0x63, 0x61, 0xD3, 0x97, 0x41, 0xC4,
                                            0x26, 0x0F, 0xB3, 0xD3, 0x9F, 0x84, 0x22, 0xA3, 0xCF, 0xDF, 0x93, 0x0D, 0x2D, 0x17, 0x75, 0xEB,
                                            0x3F, 0x97, 0x0E, 0x52, 0x95, 0x23, 0x07, 0xC9, 0xAA, 0x07, 0x3F, 0xC5, 0xE1, 0x19, 0xBA, 0xDF,
                                            0xB2, 0xFF, 0x00, 0x9E, 0x69, 0x7C, 0x8E, 0x85, 0x61, 0x4F, 0x44, 0x78, 0xC5, 0x7B, 0xD2, 0xB4,
                                            0xAC, 0xC5, 0x57, 0xF3, 0xD2, 0xDC, 0xE7, 0x11, 0xA5, 0x43, 0x0A, 0x48, 0x8C, 0x16, 0x63, 0xA2,
                                            0x07, 0x67, 0x81, 0x48, 0x9A, 0xC7, 0x3A, 0x6B, 0xFB, 0x6A, 0xFE, 0x39, 0x6A, 0xE7, 0x9F, 0x97 },
                ResultingTag = new byte[] { 0xB3, 0xB1, 0x1A, 0x8F, 0x9A, 0x94, 0xF1, 0xB1, 0xAC, 0x18, 0x53, 0xE9, 0x4C, 0x43, 0x26, 0x4A }
            };
        }

        static public string BytesToHexString(byte[] data)
        {
            if (data == null || data.Length == 0) return "";
            return BitConverter.ToString(data).Replace("-", "").ToUpper();
        }

        static public byte[] HexStringToBytes(string data)
        {
            if (string.IsNullOrWhiteSpace(data)) return new byte[0];
            byte[] result = new byte[data.Length / 2];
            for (int i = 0; i < data.Length; i += 2)
                result[i / 2] = byte.Parse(data.Substring(i, 2), System.Globalization.NumberStyles.HexNumber);
            return result;
        }
    }
}
